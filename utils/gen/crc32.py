import sys

def xpoly(xs):
    return sum(1<<x for x in xs)

crc32_poly = xpoly([32, 26, 23, 22, 16, 12, 11, 10, 8, 7, 5, 4, 2, 1, 0])

def rev(b, n):
    return sum(1 << (n - 1 - i) if b & (1 << i) else 0 for i in range(n))

def crc32_byte(b):
    p = rev(b, 8) << 32
    for i in range(8):
        if (p >> (39 - i)) & 1:
            p ^= crc32_poly << (7 - i)
    return rev(p, 32)

crc32_table = [crc32_byte(i) for i in range(256)]

fmt_int = lambda v: f"0x{v:08x}"
def_const_int = lambda t, n, v: print(f"const {t} {n}={fmt_int(v)};")

def_const_int_array = lambda t, n, vs: \
    print(f"const {t} {n}[]={{" + ",".join([fmt_int(v) for v in vs]) + "};", end="\n")

print(f"/* generated by utils/gen/{sys.argv[0].split('/')[-1]} */")
print("#include<stdint.h>")
def_const_int_array("uint32_t", "_crc32_table", crc32_table)
